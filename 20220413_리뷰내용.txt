controller에서 리턴 할 때 ResponseEntity<> 똑같은 소스를 작성해야하는 부분은 여기서는 공통으로 빼서 직접 선언하는거 안하는 방식으로 했는데 참고해서 적용해보는 것도 좋은듯


/**
 * response 에 대한 공통 처리
 *
 * @see EnableHntApiResponse
 * @see HntApiResponse
 */
@RestControllerAdvice
public class HntResponseBodyAdvice implements ResponseBodyAdvice {

    @Override
    public boolean supports(final MethodParameter returnType, final Class converterType) {
        if (returnType.getMethodAnnotation(IgnoreHntApiResponse.class) != null ||
                returnType.getExecutable().getDeclaringClass().getAnnotation(IgnoreHntApiResponse.class) != null) {
            return false;
        }

        return true;
    }

    @Override
    public Object beforeBodyWrite(final Object body, final MethodParameter returnType, final MediaType selectedContentType, final Class selectedConverterType, final ServerHttpRequest request, final ServerHttpResponse response) {
        return new HntApiResponse(body);
    }
}


HntApiResponse가 너가 만든 ResultMessage 요거랑 동일한 용도
그리고 service에서 return 타입이 모두 ResultMessage 요거인데 이건 가독성이나 명확하지 않은 형태라서 지양하는게 좋을듯 
ResultMessage 생성 시점은 컨트롤러 더 좋은건 위에 한것처럼 공통에서 wrapping해주는게 좋고
저걸 반영하면 컨트롤러에서도 리턴 타입이 원장 Dto를 선언하게끔 바꿀수있음
소스를 봤을 때 어떤 모델이 리턴되는구나 한눈에 파악되는 이점이 있을듯


--------------------------------------------------------------------------------------------------------------------------------------------------------

DI 받아서 쓸 때 
private final Service service 선언하고 
아래에 생성사 주입을 선언해두었는데 @RequiredArgsConstructor 사용하면 코드를 줄일 수 있음

--------------------------------------------------------------------------------------------------------------------------------------------------------

컨트롤러에 헤더 생성하는 것도 뭔가 더 좋은 방법이 있을 듯 함

--------------------------------------------------------------------------------------------------------------------------------------------------------

exception처리 부분은 공통으로 잘 뺏거 같고 
대신 여러 타입의 exceptoin 클래스를 만들어서 사용한거 같은데 

그냥 1개만 만들고 오류타입코드, 메시지를 enum으로 관라하는 방식으로 하는 것도 나쁘지 않음

새로운 exception처리가 필요할 때 마다 클래스 파일을 만드는 과정을 줄일 수 있을듯

--------------------------------------------------------------------------------------------------------------------------------------------------------

가능한 queryDsl은 지양하고
Sepecification 객체와 @Entity에서 @OneToMany, @ManyToOne을 사용해서 쿼리를 사용하는것을 추천
조인이 과다하게 필요한 경우 
이런건 과감하게 포기하고 
쿼리를 쪼개서 로직으로 처리하는것이 더 좋다고 함

[추가의견]
나도 정확한건 모르지만 아마 성능면에서 jpa보다는 비용이 더 들가는게 있을듯   querydql 이랑 mybatis랑 거진 비슷하게 쿼리를 짜는거다 보니 조인이 많은 건 어쩔수 없이 성능이 느려지는 상황이 옴 jpa는 복잡한 쿼리를 나눠서 로직으로 푸는게 더 효율성이 좋다고 함
jpa도 쓰고 querydsl도 쓰다보면 유지보수 측면애서도 혼선이 있을수도 있기도 하고
본인만 짜는 코드라면 유도리 있게 성능 고려해서 짤 수도 있지만 우리가 회사에서 짜는 코드들은 여러 사람들이 짜기 때문에 가능성을 열어주되 너무 혼용이 없도록 하는 것이 좋은 방향이라고 생각해 ㅋ

--------------------------------------------------------------------------------------------------------------------------------------------------------

@LoginCheck
매우 잘 활용한거 같음 

클래스 전역에도 적용할 수 있음 더 좋겠음

--------------------------------------------------------------------------------------------------------------------------------------------------------

service 쪽에 try catch가 너무 남용되는 느낌이 있음
어차피 exception이 날거 같은 경우 if처리해서 throw하면되고 

repository.save() 여기서 오류나면?
컨트롤러에서 dto 검증이 마친 상태로 service로 들고오면 save때 오류나는경우가 없으니 신경안써도 됨

--------------------------------------------------------------------------------------------------------------------------------------------------------

컨트롤러는 DTO에 대한 validation 검증을 완벽하게 역활을 마련했다면
service에서는 repository crud시 별도 검증은 안해도됨

여기서는 dto객체 내에 validate를 진행함

--------------------------------------------------------------------------------------------------------------------------------------------------------